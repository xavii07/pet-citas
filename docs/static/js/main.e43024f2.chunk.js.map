{"version":3,"sources":["components/Cita.js","components/Formulario.js","App.js","reportWebVitals.js","index.js"],"names":["Cita","memo","cita","eliminarCita","mascota","propietario","fecha","sintomas","className","onClick","id","Formulario","crearCita","setVisible","useState","setCita","error","setError","handleChange","e","target","name","value","onSubmit","preventDefault","trim","uuidv4","type","placeholder","autoComplete","onChange","App","citasIniciales","JSON","parse","localStorage","getItem","citas","setCitas","visible","useEffect","setItem","stringify","nuevasCitas","filter","subtitulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e43024f2.chunk.js","sourcesContent":["import React, {memo} from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\nconst Cita = memo(({ cita, eliminarCita }) => {\r\n    \r\n\r\n    const{mascota, propietario, fecha, sintomas } = cita\r\n\r\n\r\n\r\n    const handleClick = () => {\r\n        eliminarCita(cita.id)\r\n    }\r\n\r\n\r\n    \r\n    return (\r\n\r\n            <div className='cita'>\r\n                <p>Mascota: <span>{mascota}</span></p>\r\n                <p>Dueño: <span>{propietario}</span></p>\r\n                <p>Fecha y Hora: <span>{fecha}</span></p>\r\n                <p>Sintomas: <span>{sintomas}</span></p>\r\n\r\n                <button \r\n                    className='btn cita__dealta'\r\n                    onClick={handleClick}\r\n                >Mascota atendida &#x2714;</button>\r\n            </div>\r\n\r\n        )})\r\n\r\n\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cita;\r\n","import React, {Fragment, useState} from 'react'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nconst Formulario = ({crearCita, setVisible}) => {\r\n\r\n    const [ cita, setCita ] = useState({mascota: '', propietario: '', fecha: '', sintomas: ''})\r\n\r\n    const [error, setError] = useState(false)\r\n\r\n    \r\n    //Funcion que se ejecuta cuando el usuario escribe en los inputs\r\n    const handleChange = e => {\r\n        \r\n        setCita({\r\n            ...cita,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n    \r\n    //extraer los valores\r\n    const {mascota, propietario, fecha, sintomas} = cita\r\n    \r\n    //cuando el usuario presiona agregar cita\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        \r\n        //validar\r\n        if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || sintomas.trim() === '') {\r\n            \r\n            setError(true)\r\n            return\r\n        }\r\n        \r\n        //si pasa la validacion errror regresa a ser False\r\n        setError(false)\r\n        \r\n        //asignar un ID\r\n        cita.id = uuidv4()\r\n        \r\n        //pasar al state principal\r\n        crearCita(cita)\r\n        setVisible(false)\r\n        \r\n        //reiniciar el form\r\n        setCita({mascota: '', propietario: '', fecha: '', sintomas: ''})\r\n    }\r\n    \r\n    \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Fragment >\r\n\r\n            <h2>Crear Cita</h2>\r\n\r\n            {error && <p className='alerta-error'>Completa todos los  campos</p>}\r\n\r\n            <form \r\n                className='form-group'\r\n                onSubmit={handleSubmit}\r\n            >\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    placeholder=\"Nombre Mascota\"\r\n                    autoComplete='off'\r\n                    className='form-control mb-3'\r\n                    onChange={handleChange}\r\n                    value={mascota}\r\n                />\r\n\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    placeholder=\"Nombre Dueño de mascota\"\r\n                    autoComplete='off'\r\n                    className='form-control mb-3'\r\n                    onChange={handleChange}\r\n                    value={propietario}\r\n                />\r\n\r\n                <label>Fecha y Hora</label>\r\n                <input \r\n                    type=\"datetime-local\"\r\n                    name=\"fecha\"\r\n                    className='form-control mb-3'\r\n                    onChange={handleChange}\r\n                    value={fecha}\r\n                />\r\n\r\n                <label>Sintomas:</label>\r\n                <textarea\r\n                    name=\"sintomas\"\r\n                    placeholder='Sintomas...'\r\n                    autoComplete='off'\r\n                    className='form-control mb-4'\r\n                    onChange={handleChange}\r\n                    value={sintomas}\r\n                ></textarea>\r\n\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Crear Cita\"\r\n                    className='btn'\r\n                \r\n                />\r\n            </form>\r\n\r\n        </Fragment>\r\n       \r\n    )\r\n}\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired,\r\n    setVisible: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default Formulario\r\n","import React, { Fragment, useEffect, useState } from 'react';\nimport Cita from './components/Cita';\nimport Formulario from './components/Formulario';\n\nfunction App() {\n  //comprobar si hay citas en localStorage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'))\n  if (!citasIniciales) {\n    citasIniciales = []\n   \n  }\n  \n  const [citas, setCitas] = useState(citasIniciales)\n\n  const [ visible, setVisible ] = useState(false)\n\n  const mostrarFormulario = () => {\n    setVisible(true)\n  }\n\n  \n  useEffect(() => {\n    //comprobar si hay citas en localStorage\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'))\n\n    if(citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(citas))\n      \n    } else {\n      localStorage.setItem('citas', JSON.stringify([]))\n      \n    }\n\n  },[citas])\n\n\n  //funcion que paso al Formulario y recibe la cita agregada\n  const crearCita = cita => setCitas([...citas, cita])\n\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id)\n    setCitas(nuevasCitas)\n  }\n\n  //condicional para mostrar el titulo\n  const subtitulo = (citas.length === 0) ? \"No hay Citas :(\" : \"Administra tus Citas\"\n  \n\n\n\n  return (\n    <Fragment>\n\n      <h1>Administrador de mascotas</h1>\n\n      <div className='citas'>\n        <div className='citas__container'>\n\n         {visible ? (\n            <div className='citas__form'>\n                <Formulario \n                  crearCita={crearCita}\n                  setVisible={setVisible}\n                />\n            </div>\n         )  : (\n           <button\n             className='btn cita__dealta'\n             onClick={mostrarFormulario}\n           >Agregar una Cita</button>\n         )\n        \n        }\n\n\n          <div className='citas__citas-turno'>\n            <h2>{ subtitulo }</h2>\n\n            { citas.map( cita => (\n              <Cita \n                key={cita.id}\n                cita={cita}\n                eliminarCita={eliminarCita}\n              />\n            ))}\n\n          </div>\n\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}